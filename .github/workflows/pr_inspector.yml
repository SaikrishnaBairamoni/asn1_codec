name: PR Inspector

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize

jobs:
  inspect_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Check if PR has issue reference
        id: check_issue_reference
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          pip install requests
          pip3 install PyGithub
      - name: Run PR Inspector
        env:
          BOT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<EOF
          import os
          import requests

          # GitHub API base URL and repository information
          github_api_base = "https://api.github.com"
          owner = SaikrishnaBairamoni
          repo = asn1_codec
          BOT_TOKEN = os.environ.get("BOT_TOKEN")  # Generate one in your GitHub account settings with appropriate permissions
          
          headers = {
              "Authorization": f"token {BOT_TOKEN}",
              "Accept": "application/vnd.github.v3+json"
          }
          
          def get_open_pull_requests():
              url = f"{github_api_base}/repos/{owner}/{repo}/pulls"
              response = requests.get(url, headers=headers)
              return response.json()
          
          def has_issue_reference(body):
              # You can adjust this function to check for different issue reference patterns
              return any(word.startswith("#") for word in body.split())
          
          def comment_on_missing_references(pr_number):
              url = f"{github_api_base}/repos/{owner}/{repo}/issues/{pr_number}/comments"
              message = "It seems that this pull request lacks a reference to an issue. Please add a reference to an existing issue using 'Fixes #issue_number' or 'Closes #issue_number' in your PR description."
              payload = {"body": message}
              response = requests.post(url, headers=headers, json=payload)
              return response
          
          if __name__ == "__main__":
              prs = get_open_pull_requests()
              for pr in prs:
                  pr_number = pr["number"]
                  pr_body = pr["body"]
                  if not has_issue_reference(pr_body):
                      comment_on_missing_references(pr_number)


              
          EOF
